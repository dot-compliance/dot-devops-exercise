if (!params.MEMBER_PACKAGE) {
    currentBuild.description = "Missing MEMBER_PACKAGE param"
    error("MEMBER_PACKAGE parameter is mandatory")
}
if (!params.SF_ORG_ALIAS) {
    currentBuild.description = "Missing SF_ORG_ALIAS param"
    error("SF_ORG_ALIAS parameter is mandatory")
}

pipeline {
    agent any
    parameters {
        string(name: 'MEMBER_PACKAGE', description: 'Mandatory: Package to put in xml file')
        string(name: 'TARGET_DIR',     defaultValue: 'c:\\downloads', description: 'Where to deploy to (for local deploy only)')
        string(name: 'SF_ORG_ALIAS',   description: 'SF org to deploy to (for SF deploy only)')
        booleanParam(name: 'FORCE_DEPLOY',  defaultValue: false, description: 'Set to force SF deploy')
        booleanParam(name: 'DRY_RUN',  defaultValue: false, description: 'Set to only print operations')
    }

    stages {
        stage('Inits') {
            steps {
                script {
                    xmlFile = "$WORKSPACE\\manifest\\package.xml"
                    branchName = "deploy_${params.MEMBER_PACKAGE}_${currentBuild.startTimeInMillis}"
                    targetLocalDir = "$params.TARGET_DIR\\$branchName"
                    dryRunString = ''
                    if (params.DRY_RUN) {
                        dryRunString = 'DRY_RUN: '
                    }
                }
            }
        }
        stage('Set XML') {
            steps {
                script {
                    pythonLog = 'python.log'
                    gitLog = 'git.log'
                    String xmlNamePlaceHolder = 'PLACE_HOLDER'
                    String pythonScript = "$WORKSPACE\\python\\sedXml.py"
                    echo "Setting XML $xmlFile $xmlNamePlaceHolder to $params.MEMBER_PACKAGE"
                    bat """
                        git config --global user.email "hagitsegev4@gmail.com"
                        git config --global user.name "Hagit Segev"
                        git checkout -b $branchName > $gitLog || exit
                        echo "Output of python script: $pythonScript" > $pythonLog
                        python $pythonScript --new_string '${params.MEMBER_PACKAGE}.cls' >> $pythonLog || exit
                        echo "========= xml file after sed ============="
                        type $xmlFile
                        echo "============"
                        git commit $xmlFile -m "deploy: ${params.MEMBER_PACKAGE}" >> $gitLog || exit
                    """
                    if (!params.DRY_RUN) {
                        bat """
                            git push origin $branchName  >> $gitLog || exit
                        """
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: gitLog
                    archiveArtifacts artifacts: pythonLog
                }
            }
        }

        stage('Local Deploy') {
            steps {
                script {
                    copyLog = 'local_deploy.log'
                    String xcopyCmd = 'xcopy /E /I /F'
                    bat """
                        echo 'Local Deploy to $params.TARGET_DIR'
                        mkdir $params.TARGET_DIR || exit
                        $xcopyCmd $WORKSPACE\\config $params.TARGET_DIR\\. > $copyLog  || exit
                        $xcopyCmd $WORKSPACE\\force-app $params.TARGET_DIR\\. >> $copyLog  || exit
                        $xcopyCmd $WORKSPACE\\manifest $params.TARGET_DIR\\. >> $copyLog  || exit
                    """
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: copyLog
                }
            }
        }

        stage('SF Deploy') {
            steps {
                script {
                    String sfDeployCmd = "sf deploy functions --connected-org $params.SF_ORG_ALIAS $forceFlag --branch $branchName --json"
                    if (params.FORCE_DEPLOY) {
                        sfDeployCmd += ' --force'
                    }
                    if (params.DRY_RUN) {
                        echo "$dryRunString SF deploy command: $sfDeployCmd"
                        echo "$dryRunString SF deploy command: $sfDeployCmd" > $sfDeplpoyLog
                    } else {
                        sfDeplpoyLog = 'SF_deploy.log'
                        bat """
                            $sfDeployCmd > $sfDeplpoyLog  || exit
                        """
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: sfDeplpoyLog
                }
            }
        }
    }
    post {
        failure {
            script {
                currentBuild.description = "$dryRunString Failed: $params.MEMBER_PACKAGE deploy"
            }
        }
        success {
            script {
                currentBuild.description = "$dryRunString OK: $params.MEMBER_PACKAGE deploy"
            }
        }
    }
}